function varargout = untitled(varargin)
%UNTITLED M-file for untitled.fig
%      UNTITLED, by itself, creates a new UNTITLED or raises the existing
%      singleton*.
%
%      H = UNTITLED returns the handle to a new UNTITLED or the handle to
%      the existing singleton*.
%
%      UNTITLED('Property','Value',...) creates a new UNTITLED using the
%      given property value pairs. Unrecognized properties are passed via
%      varargin to untitled_OpeningFcn.  This calling syntax produces a
%      warning when there is an existing singleton*.
%
%      UNTITLED('CALLBACK') and UNTITLED('CALLBACK',hObject,...) call the
%      local function named CALLBACK in UNTITLED.M with the given input
%      arguments.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help untitled

% Last Modified by GUIDE v2.5 06-Jan-2005 02:58:17

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @untitled_OpeningFcn, ...
                   'gui_OutputFcn',  @untitled_OutputFcn, ...
                   'gui_LayoutFcn',  [], ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
   gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT



% --- Executes just before untitled is made visible.
function untitled_OpeningFcn(hObject, eventdata, handles, varargin)
handles.output = hObject;
guidata(hObject, handles);
%--------------------------------------------------------------------------
clc;
%clear;
%--------------------------------------------------------------------------
fprintf('**************************************************************\r')
fprintf('* Title         :  Stepper Motor Driver With Matlab          *\r')
fprintf('**************************************************************\r')
fprintf('\r')
%--------------------------------------------------------------------------
s=serial('COM1');
set(s,'baudrate',9600,'Terminator',13,'Timeout',1,'InputBufferSize',16,'OutputBufferSize',8);
%fopen(s);
%--------------------------------------------------------------------------




% --- Outputs from this function are returned to the command line.
function varargout = untitled_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;




function input1_Callback(hObject, eventdata, handles)
% hObject    handle to input1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of input1 as text
%        str2double(get(hObject,'String')) returns contents of input1 as a double

input = str2num(get(hObject,'String'));
%checks to see if input is empty. if so, default input1 to zero
if (isempty(input))
    set(hObject,'String','0')
end
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function input1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to input1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function pushbutton_Right_Callback(hObject, eventdata, handles)
    stepper_data=128;
    
    step = get(handles.input1,'String');
    step = str2num(step);
    speed = get(handles.input2,'String');
    speed = str2num(speed);
    
    %enable.pushbutton_Right=off;
    
        fprintf('Running ... \r')
        for i=1:step
            stepper_data=stepper_data*2;
            if (stepper_data > 128) stepper_data=16; end
            stepper_data_str=num2str(stepper_data);
            fprintf('stepper_data=	%d\n', stepper_data);
            %fprintf(s,stepper_data_str); 
            pause(speed); 
        end



function input2_Callback(hObject, eventdata, handles)
% hObject    handle to input2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of input2 as text
%        str2double(get(hObject,'String')) returns contents of input2 as a double
input = str2num(get(hObject,'String'));
%checks to see if input is empty. if so, default input1 to zero
if (isempty(input))
    set(hObject,'String','0')
end
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function input2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to input2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_Left.
function pushbutton_Left_Callback(hObject, eventdata, handles)  
    set(handles.pushbutton_Left,'Enable','off')
    set(handles.pushbutton_Right,'Visible','off')
    set(handles.text4,'Visible','off')
    stepper_data=16; 
    step = get(handles.input1,'String');
    step = str2num(step);
    speed = get(handles.input2,'String');
    speed = str2num(speed);
    fprintf('Running ... \r')
        for i=1:step
            stepper_data=stepper_data/2;
            if (stepper_data < 16) stepper_data=128; end
            stepper_data_str=num2str(stepper_data);
            fprintf('stepper_data=	%d\n', stepper_data);
            %fprintf(s,stepper_data_str); 
            pause(speed); 
        end
    set(handles.pushbutton_Left,'Enable','on')
    set(handles.pushbutton_Right,'Visible','on')
    set(handles.text4,'Visible','on')


